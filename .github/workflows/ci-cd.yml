name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --passWithNoTests
        
      - name: Build package
        run: npm run build
        
      - name: Test build artifacts
        run: |
          test -f dist/index.js || { echo "dist/index.js not found"; exit 1; }
          test -f dist/index.d.ts || { echo "dist/index.d.ts not found"; exit 1; }
          test -f dist/styles.css || { echo "dist/styles.css not found"; exit 1; }
          echo "‚úÖ All build artifacts found"

  publish:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Verify package version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch! Package: $PACKAGE_VERSION, Tag: $TAG_VERSION"
            exit 1
          fi
          echo "‚úÖ Version match confirmed"
        
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in v${{ steps.version.outputs.VERSION }}
            
            This release was automatically created from tag `${{ github.ref_name }}`.
            
            ### Installation
            ```bash
            npm install react-universal-toast@${{ steps.version.outputs.VERSION }}
            ```
            
            ### Links
            - üì¶ [npm Package](https://www.npmjs.com/package/react-universal-toast)
            - üöÄ [Demo & Documentation](https://deveshlashkari.github.io/react-universal-toast)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
